//@version=6
indicator("Forexoid EURUSD Adaptive - Market Condition Specialist", shorttitle="EURUSD Adaptive", overlay=true, max_labels_count=500, max_lines_count=500)

// ============================================================================
// INPUT PARAMETERS - EURUSD SPECIALIZED
// ============================================================================

// Main Settings
group_main = "🎯 Main Settings"
enable_trading = input.bool(true, "Enable Trading System", group=group_main)
enable_alerts = input.bool(true, "Enable Alerts", group=group_main)
show_background = input.bool(true, "Show Background Colors", group=group_main)
show_position_info = input.bool(true, "Show Position Information", group=group_main)

// EURUSD Specific Settings
group_eurusd = "🇪🇺 EURUSD Specific"
enable_session_optimization = input.bool(true, "Enable Session Optimization", group=group_eurusd)
enable_news_filter = input.bool(true, "Enable News Filter", group=group_eurusd)
enable_spread_optimization = input.bool(true, "Enable Spread Optimization", group=group_eurusd)
enable_multi_timeframe = input.bool(true, "Enable Multi-Timeframe", group=group_eurusd)

// Adaptive Parameters
group_adaptive = "🧠 Adaptive Parameters"
enable_adaptive_system = input.bool(true, "Enable Adaptive System", group=group_adaptive)
volatility_threshold_high = input.float(1.5, "High Volatility Threshold", group=group_adaptive)
volatility_threshold_low = input.float(0.8, "Low Volatility Threshold", group=group_adaptive)
volume_threshold_high = input.float(2.0, "High Volume Threshold", group=group_adaptive)
volume_threshold_low = input.float(0.5, "Low Volume Threshold", group=group_adaptive)

// Risk Management
group_risk = "🛡️ Risk Management"
max_risk_per_trade = input.float(2.0, "Max Risk Per Trade (%)", minval=0.1, maxval=10.0, step=0.1, group=group_risk)
atr_multiplier = input.float(1.5, "ATR Multiplier for Stops", minval=0.5, maxval=5.0, step=0.1, group=group_risk)
profit_target_ratio = input.float(2.0, "Profit Target Ratio", minval=1.0, maxval=5.0, step=0.1, group=group_risk)
trailing_stop_enabled = input.bool(true, "Enable Trailing Stop", group=group_risk)
trailing_stop_atr = input.float(1.0, "Trailing Stop ATR Multiplier", minval=0.5, maxval=3.0, step=0.1, group=group_risk)

// Visual Settings
group_visual = "🎨 Visual Settings"
show_trend_line = input.bool(true, "Show Trend Line", group=group_visual)
show_support_resistance = input.bool(true, "Show S/R Levels", group=group_visual)
signal_size = input.string("Medium", "Signal Size", options=["Small", "Medium", "Large"], group=group_visual)

// ============================================================================
// CORE FUNCTIONS - EURUSD SPECIALIZED
// ============================================================================

// Enhanced ATR Calculation for EURUSD
f_atr_eurusd(length) =>
    atr_value = ta.atr(length)
    atr_value

// EURUSD-specific Adaptive Moving Average
f_ama_eurusd(src, length, fast_sc, slow_sc) =>
    direction = math.abs(src - src[length])
    volatility = math.sum(math.abs(src - src[1]), length)
    efficiency_ratio = volatility != 0 ? direction / volatility : 0
    fast_alpha = 2 / (fast_sc + 1)
    slow_alpha = 2 / (slow_sc + 1)
    alpha = math.pow(efficiency_ratio * (fast_alpha - slow_alpha) + slow_alpha, 2)
    var float ama = na
    ama := na(ama) ? src : alpha * src + (1 - alpha) * ama
    ama

// Market Structure Analysis for EURUSD
f_market_structure_eurusd(price_high, price_low, price_close, length) =>
    var float swing_high = na
    var float swing_low = na
    var int swing_high_bar = na
    var int swing_low_bar = na
    
    // EURUSD-specific swing detection
    if price_high > price_high[1] and price_high > price_high[2] and price_high > price_high[3]
        swing_high := price_high
        swing_high_bar := bar_index
    
    if price_low < price_low[1] and price_low < price_low[2] and price_low < price_low[3]
        swing_low := price_low
        swing_low_bar := bar_index
    
    // EURUSD-specific structure analysis
    structure_bullish = swing_low > swing_low[1] and swing_high > swing_high[1]
    structure_bearish = swing_high < swing_high[1] and swing_low < swing_low[1]
    
    [structure_bullish, structure_bearish, swing_high, swing_low]

// Volume Profile Analysis for EURUSD
f_volume_profile_eurusd(price_high, price_low, price_close, price_volume, length) =>
    price_range = price_high - price_low
    volume_weighted_price = price_volume * (price_high + price_low + price_close) / 3
    vwap_value = math.sum(volume_weighted_price, length) / math.sum(price_volume, length)
    vwap_value

// Momentum Oscillator for EURUSD
f_momentum_oscillator_eurusd(src, length) =>
    momentum = src - src[length]
    momentum_sma = ta.sma(momentum, length)
    momentum_ratio = momentum_sma != 0 ? momentum / momentum_sma : 0
    momentum_ratio

// Session Detection for EURUSD
f_detect_session() =>
    current_hour = hour(time, "UTC")
    
    if current_hour >= 0 and current_hour < 8
        "ASIAN"
    else if current_hour >= 8 and current_hour < 13
        "EUROPEAN"
    else if current_hour >= 13 and current_hour < 16
        "OVERLAP"
    else if current_hour >= 16 and current_hour < 21
        "AMERICAN"
    else
        "ASIAN"

// Market Regime Detection
f_detect_market_regime(atr_14_val, atr_50_val) =>
    // Trend detection
    trend_strength = math.abs(close - close[20]) / close[20]
    
    // Volatility detection
    vol_strength = atr_14_val / atr_50_val
    
    // Volume detection
    vol_ratio = volume / ta.sma(volume, 20)
    
    if trend_strength > 0.01 and vol_strength > 1.2
        "TRENDING"
    else if vol_strength < 0.8 and vol_ratio < 0.8
        "RANGING"
    else if vol_strength > 1.5 and vol_ratio > 2.0
        "BREAKOUT"
    else
        "NEUTRAL"

// News Event Detection
f_detect_news_event(volatility_ratio_val) =>
    // Volatility spike
    vol_spike = volatility_ratio_val > 2.0
    
    // Volume spike
    volume_spike = volume > ta.sma(volume, 20) * 3.0
    
    // Price spike
    price_spike = math.abs(close - close[1]) / close[1] > 0.002
    
    vol_spike or volume_spike or price_spike

// Adaptive Parameter Adjustment
f_get_adaptive_params(atr_14_val, atr_50_val, volatility_ratio_val) =>
    current_session = f_detect_session()
    market_regime = f_detect_market_regime(atr_14_val, atr_50_val)
    news_event = f_detect_news_event(volatility_ratio_val)
    
    // Base parameters
    trend_sens = 0.6
    momentum_sens = 0.7
    profit_target = 2.0
    risk_percent = 2.0
    signal_threshold = 6.0
    
    // Session-based adjustments
    if current_session == "ASIAN"
        trend_sens := 0.8
        momentum_sens := 0.9
        profit_target := 1.5
        risk_percent := 1.0
        signal_threshold := 7.0
    else if current_session == "EUROPEAN"
        trend_sens := 0.6
        momentum_sens := 0.7
        profit_target := 2.5
        risk_percent := 1.5
        signal_threshold := 6.0
    else if current_session == "AMERICAN"
        trend_sens := 0.5
        momentum_sens := 0.6
        profit_target := 3.0
        risk_percent := 2.0
        signal_threshold := 5.5
    else if current_session == "OVERLAP"
        trend_sens := 0.4
        momentum_sens := 0.5
        profit_target := 4.0
        risk_percent := 2.5
        signal_threshold := 5.0
    
    // Market regime adjustments
    if market_regime == "TRENDING"
        trend_sens := trend_sens * 0.8
        momentum_sens := momentum_sens * 0.8
        profit_target := profit_target * 1.2
    else if market_regime == "RANGING"
        trend_sens := trend_sens * 1.2
        momentum_sens := momentum_sens * 1.2
        profit_target := profit_target * 0.8
    else if market_regime == "BREAKOUT"
        trend_sens := trend_sens * 0.6
        momentum_sens := momentum_sens * 0.6
        profit_target := profit_target * 1.5
    
    // News event adjustments
    if news_event
        signal_threshold := signal_threshold * 1.5
        risk_percent := risk_percent * 0.5
    
    [trend_sens, momentum_sens, profit_target, risk_percent, signal_threshold]

// ============================================================================
// POSITION MANAGEMENT
// ============================================================================

// Position State Variables
var string position_type = "NONE"  // "LONG", "SHORT", "NONE"
var float entry_price = na
var float stop_loss = na
var float take_profit = na
var float trailing_stop = na
var int entry_bar = na
var float max_profit = na
var float max_loss = na
var string current_strategy = "NONE"

// ============================================================================
// INDICATOR CALCULATIONS - EURUSD OPTIMIZED
// ============================================================================

// Basic Data
atr_14 = f_atr_eurusd(14)
atr_21 = f_atr_eurusd(21)
atr_50 = f_atr_eurusd(50)

// EURUSD-specific Adaptive Moving Averages
ama_fast = f_ama_eurusd(close, 8, 2, 30)
ama_slow = f_ama_eurusd(close, 16, 2, 30)
ama_trend = f_ama_eurusd(close, 40, 2, 30)

// Multi-timeframe Data
h1_close = request.security(syminfo.tickerid, "60", close)
m15_close = request.security(syminfo.tickerid, "15", close)

// Multi-timeframe structure - simplified approach
m15_structure_bullish = request.security(syminfo.tickerid, "15", close > ta.sma(close, 20))
m15_structure_bearish = request.security(syminfo.tickerid, "15", close < ta.sma(close, 20))

// Market Structure
[structure_bullish, structure_bearish, swing_high, swing_low] = f_market_structure_eurusd(high, low, close, 3)

// Volume Analysis
vwap_current = f_volume_profile_eurusd(high, low, close, volume, 16)
vwap_h1 = request.security(syminfo.tickerid, "60", f_volume_profile_eurusd(high, low, close, volume, 16))

// Momentum Analysis
momentum_current = f_momentum_oscillator_eurusd(close, 12)
momentum_h1 = request.security(syminfo.tickerid, "60", f_momentum_oscillator_eurusd(close, 12))

// Volatility Analysis
volatility_ratio = atr_14 / atr_50
volatility_expanding = volatility_ratio > volatility_threshold_high
volatility_contracting = volatility_ratio < volatility_threshold_low

// Trend Analysis
trend_bullish_h1 = h1_close > h1_close[1] and h1_close[1] > h1_close[2]
trend_bearish_h1 = h1_close < h1_close[1] and h1_close[1] < h1_close[2]
trend_neutral_h1 = not trend_bullish_h1 and not trend_bearish_h1

// Price Action Analysis
price_above_vwap = close > vwap_current
price_below_vwap = close < vwap_current
price_near_vwap = math.abs(close - vwap_current) / close < 0.001

// Adaptive Parameters
[adaptive_trend_sens, adaptive_momentum_sens, adaptive_profit_target, adaptive_risk, adaptive_signal_threshold] = f_get_adaptive_params(atr_14, atr_50, volatility_ratio)

// Session and Regime Detection
current_session = f_detect_session()
market_regime = f_detect_market_regime(atr_14, atr_50)
news_event = f_detect_news_event(volatility_ratio)

// ============================================================================
// SIGNAL GENERATION - EURUSD ADAPTIVE
// ============================================================================

// Long Signal Conditions - Adaptive
long_trend_condition = trend_bullish_h1 and close > ama_fast and ama_fast > ama_slow
long_momentum_condition = momentum_current > adaptive_momentum_sens and momentum_h1 > 0
long_structure_condition = structure_bullish and close > swing_low
long_volume_condition = volume > ta.sma(volume, 16) * 1.1
long_volatility_condition = not volatility_contracting
long_price_condition = price_above_vwap and close > close[1]
long_multi_tf_condition = enable_multi_timeframe ? m15_structure_bullish : true
long_news_condition = enable_news_filter ? not news_event : true

// Short Signal Conditions - Adaptive
short_trend_condition = trend_bearish_h1 and close < ama_fast and ama_fast < ama_slow
short_momentum_condition = momentum_current < -adaptive_momentum_sens and momentum_h1 < 0
short_structure_condition = structure_bearish and close < swing_high
short_volume_condition = volume > ta.sma(volume, 16) * 1.1
short_volatility_condition = not volatility_contracting
short_price_condition = price_below_vwap and close < close[1]
short_multi_tf_condition = enable_multi_timeframe ? m15_structure_bearish : true
short_news_condition = enable_news_filter ? not news_event : true

// Signal Strength Calculation - Adaptive
long_strength = 0.0
short_strength = 0.0

if long_trend_condition
    long_strength += 2.5
if long_momentum_condition
    long_strength += 2.0
if long_structure_condition
    long_strength += 1.5
if long_volume_condition
    long_strength += 1.0
if long_volatility_condition
    long_strength += 1.0
if long_price_condition
    long_strength += 1.0
if long_multi_tf_condition
    long_strength += 1.0
if long_news_condition
    long_strength += 0.5

if short_trend_condition
    short_strength += 2.5
if short_momentum_condition
    short_strength += 2.0
if short_structure_condition
    short_strength += 1.5
if short_volume_condition
    short_strength += 1.0
if short_volatility_condition
    short_strength += 1.0
if short_price_condition
    short_strength += 1.0
if short_multi_tf_condition
    short_strength += 1.0
if short_news_condition
    short_strength += 0.5

// Entry Signals - Adaptive Threshold
long_entry_signal = enable_trading and position_type == "NONE" and long_strength >= adaptive_signal_threshold and long_strength > short_strength
short_entry_signal = enable_trading and position_type == "NONE" and short_strength >= adaptive_signal_threshold and short_strength > long_strength

// Signal Filtering - Adaptive Cooldown
var int last_signal_bar = 0
signal_cooldown = news_event ? 10 : (market_regime == "BREAKOUT" ? 2 : 3)

if long_entry_signal or short_entry_signal
    if bar_index - last_signal_bar > signal_cooldown
        last_signal_bar := bar_index
    else
        long_entry_signal := false
        short_entry_signal := false

// ============================================================================
// POSITION MANAGEMENT LOGIC - ADAPTIVE
// ============================================================================

// Calculate Stop Loss and Take Profit - Adaptive
stop_loss_long = low - atr_14 * atr_multiplier
stop_loss_short = high + atr_14 * atr_multiplier

take_profit_long = close + (close - stop_loss_long) * adaptive_profit_target
take_profit_short = close - (stop_loss_short - close) * adaptive_profit_target

// Open Positions
if long_entry_signal
    position_type := "LONG"
    entry_price := close
    stop_loss := stop_loss_long
    take_profit := take_profit_long
    trailing_stop := stop_loss_long
    entry_bar := bar_index
    max_profit := 0
    max_loss := 0
    current_strategy := current_session

if short_entry_signal
    position_type := "SHORT"
    entry_price := close
    stop_loss := stop_loss_short
    take_profit := take_profit_short
    trailing_stop := stop_loss_short
    entry_bar := bar_index
    max_profit := 0
    max_loss := 0
    current_strategy := current_session

// Position Management - Adaptive
// Calculate current profit/loss for both positions
current_profit_long = position_type == "LONG" ? (close - entry_price) : 0
current_profit_short = position_type == "SHORT" ? (entry_price - close) : 0
current_profit = position_type == "LONG" ? current_profit_long : current_profit_short
current_loss_long = position_type == "LONG" ? (entry_price - close) : 0
current_loss_short = position_type == "SHORT" ? (close - entry_price) : 0
current_loss = position_type == "LONG" ? current_loss_long : current_loss_short

if position_type == "LONG"
    // Update max profit/loss
    
    if na(max_profit) or current_profit > max_profit
        max_profit := current_profit
    
    if na(max_loss) or current_loss > max_loss
        max_loss := current_loss
    
    // Adaptive Trailing Stop Logic
    if trailing_stop_enabled and current_profit > 0
        new_trailing_stop = close - atr_14 * trailing_stop_atr
        if new_trailing_stop > trailing_stop
            trailing_stop := new_trailing_stop
    
    // Adaptive Exit Conditions for LONG
    exit_long_stop = close <= trailing_stop
    exit_long_profit = close >= take_profit
    exit_long_structure = structure_bearish and close < swing_low
    exit_long_momentum = momentum_current < -adaptive_momentum_sens * 0.8
    exit_long_news = news_event and current_profit < 0
    
    if exit_long_stop or exit_long_profit or exit_long_structure or exit_long_momentum or exit_long_news
        position_type := "NONE"
        entry_price := na
        stop_loss := na
        take_profit := na
        trailing_stop := na
        entry_bar := na
        max_profit := na
        max_loss := na
        current_strategy := "NONE"

if position_type == "SHORT"
    // Update max profit/loss
    
    if na(max_profit) or current_profit > max_profit
        max_profit := current_profit
    
    if na(max_loss) or current_loss > max_loss
        max_loss := current_loss
    
    // Adaptive Trailing Stop Logic
    if trailing_stop_enabled and current_profit > 0
        new_trailing_stop = close + atr_14 * trailing_stop_atr
        if new_trailing_stop < trailing_stop
            trailing_stop := new_trailing_stop
    
    // Adaptive Exit Conditions for SHORT
    exit_short_stop = close >= trailing_stop
    exit_short_profit = close <= take_profit
    exit_short_structure = structure_bullish and close > swing_high
    exit_short_momentum = momentum_current > adaptive_momentum_sens * 0.8
    exit_short_news = news_event and current_profit < 0
    
    if exit_short_stop or exit_short_profit or exit_short_structure or exit_short_momentum or exit_short_news
        position_type := "NONE"
        entry_price := na
        stop_loss := na
        take_profit := na
        trailing_stop := na
        entry_bar := na
        max_profit := na
        max_loss := na
        current_strategy := "NONE"

// ============================================================================
// VISUAL ELEMENTS - EURUSD THEMED
// ============================================================================

// Background Colors - EURUSD themed
bg_color = color.new(color.white, 95)
bg_long = color.new(color.green, 90)
bg_short = color.new(color.red, 90)
bg_position = color.new(color.blue, 85)
bg_news = color.new(color.orange, 80)

// Background coloring - Adaptive
bgcolor(long_entry_signal and show_background ? bg_long : short_entry_signal and show_background ? bg_short : position_type != "NONE" and show_background ? bg_position : news_event and show_background ? bg_news : na, title="Signal Background")

// Trend Line - EURUSD optimized
trend_line_color = close > ama_trend ? color.green : color.red
plot(ama_trend, color=trend_line_color, linewidth=2, title="EURUSD Trend Line")

// Support and Resistance Levels
plot(show_support_resistance ? swing_high : na, color=color.red, style=plot.style_linebr, linewidth=1, title="Resistance")
plot(show_support_resistance ? swing_low : na, color=color.green, style=plot.style_linebr, linewidth=1, title="Support")

// VWAP
plot(vwap_current, color=color.blue, linewidth=1, title="EURUSD VWAP")

// Position Lines - Adaptive
plot(position_type == "LONG" ? stop_loss : na, color=color.red, style=plot.style_linebr, linewidth=2, title="Long Stop Loss")
plot(position_type == "LONG" ? take_profit : na, color=color.green, style=plot.style_linebr, linewidth=2, title="Long Take Profit")
plot(position_type == "SHORT" ? stop_loss : na, color=color.red, style=plot.style_linebr, linewidth=2, title="Short Stop Loss")
plot(position_type == "SHORT" ? take_profit : na, color=color.green, style=plot.style_linebr, linewidth=2, title="Short Take Profit")

// ============================================================================
// SIGNAL LABELS AND ARROWS - EURUSD ADAPTIVE
// ============================================================================

// Signal Size Configuration
label_size = signal_size == "Small" ? size.small : signal_size == "Medium" ? size.normal : size.large

// Entry Signals - EURUSD Adaptive
if long_entry_signal
    label.new(bar_index, low - atr_14, "🇪🇺 EURUSD LONG\nSession: " + current_session + "\nRegime: " + market_regime + "\nEntry: " + str.tostring(close, "#.####") + "\nSL: " + str.tostring(stop_loss_long, "#.####") + "\nTP: " + str.tostring(take_profit_long, "#.####") + "\nStrength: " + str.tostring(long_strength, "#.#"), 
              color=color.green, textcolor=color.white, style=label.style_label_up, size=label_size)
    
    if enable_alerts
        alert("🇪🇺 EURUSD LONG - Session: " + current_session + " | Regime: " + market_regime + " | Entry: " + str.tostring(close, "#.####"), alert.freq_once_per_bar)

if short_entry_signal
    label.new(bar_index, high + atr_14, "🇪🇺 EURUSD SHORT\nSession: " + current_session + "\nRegime: " + market_regime + "\nEntry: " + str.tostring(close, "#.####") + "\nSL: " + str.tostring(stop_loss_short, "#.####") + "\nTP: " + str.tostring(take_profit_short, "#.####") + "\nStrength: " + str.tostring(short_strength, "#.#"), 
              color=color.red, textcolor=color.white, style=label.style_label_down, size=label_size)
    
    if enable_alerts
        alert("🇪🇺 EURUSD SHORT - Session: " + current_session + " | Regime: " + market_regime + " | Entry: " + str.tostring(close, "#.####"), alert.freq_once_per_bar)

// Exit Signals - EURUSD Adaptive
if position_type == "LONG" and (close <= trailing_stop or close >= take_profit or (structure_bearish and close < swing_low) or momentum_current < -adaptive_momentum_sens * 0.8 or (news_event and current_profit_long < 0))
    exit_reason = close <= trailing_stop ? "Stop Loss" : close >= take_profit ? "Take Profit" : (structure_bearish and close < swing_low) ? "Structure Change" : momentum_current < -adaptive_momentum_sens * 0.8 ? "Momentum Change" : "News Event"
    label.new(bar_index, high + atr_14, "🔴 CLOSE EURUSD LONG\nExit: " + str.tostring(close, "#.####") + "\nReason: " + exit_reason + "\nP&L: " + str.tostring((close - entry_price) * 10000, "#") + " pips", 
              color=color.orange, textcolor=color.white, style=label.style_label_down, size=label_size)
    
    if enable_alerts
        alert("🔴 CLOSE EURUSD LONG - Exit: " + str.tostring(close, "#.####") + " | Reason: " + exit_reason, alert.freq_once_per_bar)

if position_type == "SHORT" and (close >= trailing_stop or close <= take_profit or (structure_bullish and close > swing_high) or momentum_current > adaptive_momentum_sens * 0.8 or (news_event and current_profit_short < 0))
    exit_reason = close >= trailing_stop ? "Stop Loss" : close <= take_profit ? "Take Profit" : (structure_bullish and close > swing_high) ? "Structure Change" : momentum_current > adaptive_momentum_sens * 0.8 ? "Momentum Change" : "News Event"
    label.new(bar_index, low - atr_14, "🟢 CLOSE EURUSD SHORT\nExit: " + str.tostring(close, "#.####") + "\nReason: " + exit_reason + "\nP&L: " + str.tostring((entry_price - close) * 10000, "#") + " pips", 
              color=color.orange, textcolor=color.white, style=label.style_label_up, size=label_size)
    
    if enable_alerts
        alert("🟢 CLOSE EURUSD SHORT - Exit: " + str.tostring(close, "#.####") + " | Reason: " + exit_reason, alert.freq_once_per_bar)

// ============================================================================
// POSITION INFORMATION TABLE - EURUSD ADAPTIVE (Vpravo nahoře)
// ============================================================================

// Create position information table - Vpravo nahoře
var table position_table = table.new(position.top_right, 2, 8, bgcolor=color.new(color.white, 80), border_width=1)

if barstate.islast and show_position_info
    // Clear table
    table.clear(position_table, 0, 0, 1, 7)
    
    // Headers
    table.cell(position_table, 0, 0, "EURUSD Position", text_color=color.white, text_size=size.small, bgcolor=color.new(color.blue, 20))
    table.cell(position_table, 1, 0, "Value", text_color=color.white, text_size=size.small, bgcolor=color.new(color.blue, 20))
    
    // Position Status
    table.cell(position_table, 0, 1, "Status", text_color=color.new(color.white, 10), text_size=size.tiny, bgcolor=color.new(color.white, 90))
    status_text = position_type == "LONG" ? "🟢 LONG" : position_type == "SHORT" ? "🔴 SHORT" : "⚪ NO POSITION"
    table.cell(position_table, 1, 1, status_text, text_color=color.new(color.white, 10), text_size=size.tiny, bgcolor=color.new(color.white, 90))
    
    // Current Session
    table.cell(position_table, 0, 2, "Session", text_color=color.new(color.white, 10), text_size=size.tiny, bgcolor=color.new(color.white, 90))
    table.cell(position_table, 1, 2, current_session, text_color=color.new(color.white, 10), text_size=size.tiny, bgcolor=color.new(color.white, 90))
    
    // Market Regime
    table.cell(position_table, 0, 3, "Regime", text_color=color.new(color.white, 10), text_size=size.tiny, bgcolor=color.new(color.white, 90))
    table.cell(position_table, 1, 3, market_regime, text_color=color.new(color.white, 10), text_size=size.tiny, bgcolor=color.new(color.white, 90))
    
    if position_type != "NONE"
        // Entry Price
        table.cell(position_table, 0, 4, "Entry Price", text_color=color.new(color.white, 10), text_size=size.tiny, bgcolor=color.new(color.white, 90))
        table.cell(position_table, 1, 4, str.tostring(entry_price, "#.####"), text_color=color.new(color.white, 10), text_size=size.tiny, bgcolor=color.new(color.white, 90))
        
        // Current P&L
        table.cell(position_table, 0, 5, "Current P&L", text_color=color.new(color.white, 10), text_size=size.tiny, bgcolor=color.new(color.white, 90))
        current_pnl = position_type == "LONG" ? (close - entry_price) * 10000 : (entry_price - close) * 10000
        pnl_color = current_pnl > 0 ? color.new(color.lime, 10) : color.new(color.red, 10)
        table.cell(position_table, 1, 5, str.tostring(current_pnl, "#") + " pips", text_color=pnl_color, text_size=size.tiny, bgcolor=color.new(color.white, 90))
        
        // Stop Loss
        table.cell(position_table, 0, 6, "Stop Loss", text_color=color.new(color.white, 10), text_size=size.tiny, bgcolor=color.new(color.white, 90))
        table.cell(position_table, 1, 6, str.tostring(stop_loss, "#.####"), text_color=color.new(color.red, 10), text_size=size.tiny, bgcolor=color.new(color.white, 90))
        
        // Take Profit
        table.cell(position_table, 0, 7, "Take Profit", text_color=color.new(color.white, 10), text_size=size.tiny, bgcolor=color.new(color.white, 90))
        table.cell(position_table, 1, 7, str.tostring(take_profit, "#.####"), text_color=color.new(color.lime, 10), text_size=size.tiny, bgcolor=color.new(color.white, 90))

// ============================================================================
// MARKET INFORMATION TABLE - EURUSD ADAPTIVE (Vpravo dole)
// ============================================================================

// Create market information table - Vpravo dole
var table market_table = table.new(position.bottom_right, 2, 10, bgcolor=color.new(color.white, 80), border_width=1)

if barstate.islast
    // Clear table
    table.clear(market_table, 0, 0, 1, 9)
    
    // Headers
    table.cell(market_table, 0, 0, "EURUSD Market Info", text_color=color.white, text_size=size.small, bgcolor=color.new(color.blue, 20))
    table.cell(market_table, 1, 0, "Value", text_color=color.white, text_size=size.small, bgcolor=color.new(color.blue, 20))
    
    // Data rows
    table.cell(market_table, 0, 1, "Session", text_color=color.new(color.white, 10), text_size=size.tiny, bgcolor=color.new(color.white, 90))
    table.cell(market_table, 1, 1, current_session, text_color=color.new(color.white, 10), text_size=size.tiny, bgcolor=color.new(color.white, 90))
    
    table.cell(market_table, 0, 2, "Regime", text_color=color.new(color.white, 10), text_size=size.tiny, bgcolor=color.new(color.white, 90))
    table.cell(market_table, 1, 2, market_regime, text_color=color.new(color.white, 10), text_size=size.tiny, bgcolor=color.new(color.white, 90))
    
    table.cell(market_table, 0, 3, "Trend H1", text_color=color.new(color.white, 10), text_size=size.tiny, bgcolor=color.new(color.white, 90))
    trend_text = trend_bullish_h1 ? "🟢 Bullish" : trend_bearish_h1 ? "🔴 Bearish" : "⚪ Neutral"
    table.cell(market_table, 1, 3, trend_text, text_color=color.new(color.white, 10), text_size=size.tiny, bgcolor=color.new(color.white, 90))
    
    table.cell(market_table, 0, 4, "Structure", text_color=color.new(color.white, 10), text_size=size.tiny, bgcolor=color.new(color.white, 90))
    structure_text = structure_bullish ? "🟢 Bullish" : structure_bearish ? "🔴 Bearish" : "⚪ Neutral"
    table.cell(market_table, 1, 4, structure_text, text_color=color.new(color.white, 10), text_size=size.tiny, bgcolor=color.new(color.white, 90))
    
    table.cell(market_table, 0, 5, "Momentum", text_color=color.new(color.white, 10), text_size=size.tiny, bgcolor=color.new(color.white, 90))
    momentum_text = momentum_current > 0 ? "🟢 Positive" : "🔴 Negative"
    table.cell(market_table, 1, 5, momentum_text, text_color=color.new(color.white, 10), text_size=size.tiny, bgcolor=color.new(color.white, 90))
    
    table.cell(market_table, 0, 6, "Volatility", text_color=color.new(color.white, 10), text_size=size.tiny, bgcolor=color.new(color.white, 90))
    vol_text = volatility_expanding ? "📈 Expanding" : volatility_contracting ? "📉 Contracting" : "➡️ Normal"
    table.cell(market_table, 1, 6, vol_text, text_color=color.new(color.white, 10), text_size=size.tiny, bgcolor=color.new(color.white, 90))
    
    table.cell(market_table, 0, 7, "News Event", text_color=color.new(color.white, 10), text_size=size.tiny, bgcolor=color.new(color.white, 90))
    news_text = news_event ? "🚨 Active" : "✅ Clear"
    table.cell(market_table, 1, 7, news_text, text_color=color.new(color.white, 10), text_size=size.tiny, bgcolor=color.new(color.white, 90))
    
    table.cell(market_table, 0, 8, "Long Strength", text_color=color.new(color.white, 10), text_size=size.tiny, bgcolor=color.new(color.white, 90))
    table.cell(market_table, 1, 8, str.tostring(long_strength, "#.#"), text_color=color.new(color.white, 10), text_size=size.tiny, bgcolor=color.new(color.white, 90))
    
    table.cell(market_table, 0, 9, "Short Strength", text_color=color.new(color.white, 10), text_size=size.tiny, bgcolor=color.new(color.white, 90))
    table.cell(market_table, 1, 9, str.tostring(short_strength, "#.#"), text_color=color.new(color.white, 10), text_size=size.tiny, bgcolor=color.new(color.white, 90))

// ============================================================================
// PLOT SHAPES FOR ADDITIONAL VISUAL CUES - EURUSD ADAPTIVE
// ============================================================================

// Plot shapes for entry signals
plotshape(long_entry_signal, style=shape.triangleup, location=location.belowbar, color=color.green, size=size.small, title="EURUSD Long Entry")
plotshape(short_entry_signal, style=shape.triangledown, location=location.abovebar, color=color.red, size=size.small, title="EURUSD Short Entry")

// Plot shapes for exit signals
plotshape(position_type == "LONG" and (close <= trailing_stop or close >= take_profit or (structure_bearish and close < swing_low) or momentum_current < -adaptive_momentum_sens * 0.8 or (news_event and current_profit_long < 0)), style=shape.xcross, location=location.abovebar, color=color.orange, size=size.small, title="Long Exit")
plotshape(position_type == "SHORT" and (close >= trailing_stop or close <= take_profit or (structure_bullish and close > swing_high) or momentum_current > adaptive_momentum_sens * 0.8 or (news_event and current_profit_short < 0)), style=shape.xcross, location=location.belowbar, color=color.orange, size=size.small, title="Short Exit")

// Plot shapes for volatility changes
plotshape(volatility_expanding, style=shape.circle, location=location.top, color=color.orange, size=size.tiny, title="Volatility Expanding")
plotshape(volatility_contracting, style=shape.circle, location=location.bottom, color=color.blue, size=size.tiny, title="Volatility Contracting")

// Plot shapes for news events
plotshape(news_event, style=shape.diamond, location=location.top, color=color.red, size=size.small, title="News Event")

// Plot shapes for session changes
plotshape(current_session != current_session[1], style=shape.square, location=location.bottom, color=color.yellow, size=size.tiny, title="Session Change")
